<%
var caramel;
var log = new Log();
var verb = request.getMethod();
(function () {

	//New authorization using app manager SSO
	var header = request.getHeader("X-JWT-Assertion");

	// Create Base64 Object
	//var Base64 = require('../modules/base64.js');

	if(header !=null){
		var jwtAssertions = header.split("."); //JWT header by default contains three '.' separated sections
		var jsonString = btoa(jwtAssertions[1]);
		jsonString = jsonString.replace("http://wso2.org/claims/emailaddress", "email");
		jsonString = jsonString.replace("http://wso2.org/claims/role", "roles");
		var obj = parse(jsonString);
		var email = obj.email;
		var roles = obj.roles;

		if (roles.indexOf("admin") != -1) {
			session.put("username", email);
			session.put("role", "admin");
		} else {
			session.put("username", email);
			session.put("role", "user");
		}
	}

	var username=session.get('username');
	//var username = "Vimuth"; // has to be removed and upper line should be uncommented once the LDap connection is set.
	var admin= session.get('role')=='admin';

	if(username==null){
		response.sendRedirect("../login.jag?"+request.getRequestURI());
		return;
	}
	var dataService = require('modules/dataservice.jag');


	if( verb=='POST')
	{

		try {
			var voter_idData = dataService.getIDFromName(username);

			var voter_id=voter_idData.Entries.Entry.id;
			var id=0;
			var data = request.getContent();
			//log.info(data);
			var pp = dataService.getId();
			//log.info(pp);
			var houses=dataService.getHouseList();
			if( data.Nominee.type == "G"){
				for (var i=0 ;i< houses.length;i++)
				{




					//log.info(pp);
					if(houses[i].name == data.Nominee.name)
					{
						//g.info(pp);
						id = houses[i].id
						log.info(id);
					}
				}


			}

			else {		for (var i=0 ;i< pp.people.length;i++)
			{




				//log.info(pp);
				if(pp.people[i].name == data.Nominee.name)
				{
					//g.info(pp);
					id = pp.people[i].id
					log.info(id);
				}
			}
			}
			var vote = new Object();
			// voter_id to be taken from session
			vote.voter_id = voter_id;
			vote.nominee_id = id;
			vote.event_award_instance_id =data.Nominee.award;
			//vote.event_award_instance_id = awardId;
			log.info(data);

			if(dataService.addNominee(vote));
			{
				response.contentType = 'application/json';
				response.content = {
					'redirect':true, 'url':'award-list.jag'} ;
			}

		}
		catch (e) {
			log.error(e.toString());
			response.sendRedirect("error.jag");
		}

	}
	else{
		if (verb=='GET'){
			try{
				var voter_idData = dataService.getIDFromName(username);

				var voter_id=voter_idData.Entries.Entry.id;
				// log.info(voter_id);
				//var award_name_data = dataService.getAwards();
				//log.info(award_name_data);

				var dataService = require('modules/dataservice.jag');
				var nominees = [nominees];
				var peopleNames = [peopleNames];
				//var voter_id=70;
				var award_id ;
				var uriMatcher = new URIMatcher(request.getRequestURI());

				if(uriMatcher.match('/HouseManagement/votes/{id}/{name}/{event}'))
				{
					award_id = uriMatcher.elements().id;
					award_name =uriMatcher.elements().name;
					event_name =uriMatcher.elements().event;
				}

				var data = dataService.getNominees(award_id);//  event id to be taken from session
				var voteData = dataService.getAwardVotes(award_id);
				var EventAwardData=dataService.getEventAwardId(award_id);
				var eventAwardId=EventAwardData.event_award_instanceCollection.event_award_instance.event_award_id;

				var EventAwardType=dataService.getEventAwardType(eventAwardId);
				var type = EventAwardType.event_awardCollection.event_award.type;
				var voter= new Object();
				voter.voterId= voter_id;
				voter.eventId= award_id;
				voter.awardName= award_name;
				voter.eventName =event_name;
				voter.type = type;


				if(type == "I"){
					voter.typeI = true;
					voter.typeG =false;
				}
				else{
					voter.typeI = false;
					voter.typeG =true;
				}

				log.info(voter);

				if(!(data.votesCollection.votes instanceof Array) && (data.votesCollection !== ""))

				{
					var votes_array=[votes_array];
					votes_array[0]=voteData.votesCollection.votes;
					nominee= data.votesCollection.votes.nominee_id;

					if(type == "G"){
						peopleNames[0]= dataService.getHouse(nominee);
					}
					else{
						peopleNames[0]= dataService.getNames(nominee);
					}

					var people = {
						"names" : peopleNames };
						var pp = dataService.getId();
						var houses=dataService.getHouseList();
						var msg="";
						//log.info(pp.people);
						//log.info(houses);
						caramel = require('caramel');
						caramel.render({
							'header':{
							'username': username,
							'role': admin,
						},
						'title': {
						text :'Votes'
						},

						'vote': {
						'nominees':people.names ,'people':pp.people, 'voter' : voter, 'votes' : votes_array, 'houses':houses,'message':msg},
						'sidenav' :{
						'admin': admin},
						'sidenav' :{
						'admin': admin, 'house':session.get('house')}
						});

				}

				if(data.votesCollection == "")
				{
					var houses=dataService.getHouseList();
					var pp = dataService.getId();
					var msg = "No nominees for this award yet."
							caramel = require('caramel');
					caramel.render({
						'header':{
						'username': username
					},
					'title': {
					text :'Votes'
					},

					'vote': {
					'people':pp.people, 'voter' : voter, 'votes' : voteData.votesCollection.votes,'houses':houses, 'message':msg},
					'sidenav' :{
					'admin': admin},
					'sidenav' :{
					'admin': admin, 'house':session.get('house')}
					});



				}

				if((data.votesCollection.votes instanceof Array) )
				{

					if(type == "G"){

						for (var i=0 ;i< data.votesCollection.votes.length;i++)
						{

							nominees[i] = data.votesCollection.votes[i].nominee_id;
							peopleNames[i] = dataService.getHouse(nominees[i]);

						}

					}

					else{

						for (var i=0 ;i< data.votesCollection.votes.length;i++)
						{
							nominees[i] = data.votesCollection.votes[i].nominee_id;
							//log.info(nominees[i]);
							peopleNames[i] = dataService.getNames(nominees[i]);
						}
					}
					var people = {
						"names" : peopleNames };
						//log.info(people.names);
						var msg="";
						var houses=dataService.getHouseList();
						var pp = dataService.getId();
						var people = {
							"names" : peopleNames };
							var results = [];
							var idsSeen = {
							}, idSeenValue = {
							};
							for (var i = 0, len = people.names.length, name; i < len; ++i)
							{
								name= people.names[i].name;
								if (idsSeen[name] !== idSeenValue)
								{
									results.push(people.names[i]);
									idsSeen[name] = idSeenValue;
								}
							}

							log.info(pp.people);
							var pp = dataService.getId();
							//log.info(voteData.votesCollection.votes);
							people = {
								"names" : results };

								caramel = require('caramel');
								caramel.render({
									'header':{
									'username': username
								},
								'title': {
								text :'Votes'
								},
									
								'vote': {
								'nominees':people.names , 'people':pp.people , 'voter' : voter, 'votes' : voteData.votesCollection.votes , 'houses':houses,'message':msg},
								'sidenav' :{
								'admin': admin, 'house':session.get('house')}
								});



				}
			}
			catch(e)
			{
				// response.sendRedirect("/HouseManagement/error.jag");
			}

		}
	}
}());
%>
