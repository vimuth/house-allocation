<%

var caramel;
var Handlebars;
var log = new Log();
var dataService = require('modules/dataservice.jag');
var verb = request.getMethod();

Handlebars = require('handlebars');
var moment = require('modules/moment-with-langs.js').moment;
Handlebars.Handlebars.registerHelper('if_eq', function(a, b,options) {
	if (a == b)
		return options.fn(this);
	else
		return options.inverse(this);
});
Handlebars.Handlebars.registerHelper("formatDate", function(datetime,format_str, options) {
	// 	format_str = new String(format_str);
	if (moment) {
		return moment(datetime).format(format_str);
	}
	else {
		return datetime;
	}
});
Handlebars.Handlebars.registerHelper("isVotingPeriod", function(startDate, endDate ,options) {
	if (moment(startDate)-moment()<0 && moment(endDate)-moment()>0) {
		return options.fn(this);
	}
	else {
		return options.inverse(this);
	}
});
Handlebars.Handlebars.registerHelper("unlessVotingPeriod", function(startDate, endDate ,options) {
	if (moment(startDate)-moment()<0 && moment(endDate)-moment()>0) {
		return options.inverse(this);
	}
	else {
		return options.fn(this);
	}
});

	(function () {

		//New authorization using app manager SSO
		var header = request.getHeader("X-JWT-Assertion");
			
		// Create Base64 Object
		//var Base64 = require('../modules/base64.js');
			
		if(header !=null){
			var jwtAssertions = header.split("."); //JWT header by default contains three '.' separated sections
			var jsonString = btoa(jwtAssertions[1]);
			jsonString = jsonString.replace("http://wso2.org/claims/emailaddress", "email");
			jsonString = jsonString.replace("http://wso2.org/claims/role", "roles");
			var obj = parse(jsonString);
			var email = obj.email;
			var roles = obj.roles;
				
			if (roles.indexOf("admin") != -1) {
				session.put("username", email);
				session.put("role", "admin");
			} else {
				session.put("username", email);
				session.put("role", "user");
			}
		}

		var username=session.get('username');
		var admin= session.get('role')=='admin';

		if(username==null){
			response.sendRedirect("../login.jag?"+request.getRequestURI());
			return;
		}

		var isAdmin = session.get('role')=='admin';

		var uriMatcher = new URIMatcher(request.getRequestURI());
		if(uriMatcher.match('/HouseManagement/event-instance/{id}')) {
			if(verb=='GET'){

				var id = uriMatcher.elements().id;
				var data = dataService.getEventInstance(id);

				data.isAdmin = isAdmin;

				log.info(data);

				caramel = require('caramel');
					

				caramel.render({
					'header':{
					'username': username,
					'role': admin,
				},
				'title': {
				text :data.eventInstance.name},
				'body': data,
				'sidenav' :{
				'admin': admin, 'house':session.get('house')}
				});
				// 			}
				// 			catch(e){
				// 				log.error(e);
				// 				response.sendRedirect("/HouseManagement/error.jag");
				// 			}
			}
		}
		else{
			response.sendRedirect("../event-list.jag");
			return;
		}

	}());
	%>

