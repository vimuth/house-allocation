<%

newURl = 'http://localhost:9763/services/house_allocation/';
var base_url = 'http://localhost:9763/services/house_allocation/';
var url = 'http://localhost:9763/services/house_allocation/';

var events_url = base_url + 'events/';
var activities_url = base_url +'activities/';
var awards_url = base_url +'awards/';
var awards_instance_url = base_url +'awards_instance/';
var event_instance_url= base_url +'event_instance';
var votes_url = base_url +'votes/';
var votesNominee_url = base_url +'votes_nominee/';
var peopleNames_url = base_url +'people_names/';
var current_elections_url = base_url +'current-elections/';
var award_instance_url= base_url +'eventAwardId/'
var award_type_url= base_url +'event_award_type/'
var house_url = base_url +'house/';


var HOUSES = ['Cloud Bots', 'Legion', 'Titans' , 'WildBoars'];

var log = new Log();

//gets details about an event when given the id
function getEvent(id){
	var eventData = parse(get(events_url+id,null,{
		"Accept":"application/json"},"application/json").data);
		var activityData = parse(get(url+'event/activities/'+id,null,{
			"Accept":"application/json"},"application/json").data);
			var awardData = parse(get(url+'event/awards/'+id,null,{
				"Accept":"application/json"},"application/json").data);


				if(!(activityData.activityCollection.activity instanceof Array)){
					activityData.activityCollection.activity = [activityData.activityCollection.activity];
				}

				if(!(awardData.awardCollection.award instanceof Array)){
					awardData.awardCollection.award = [awardData.awardCollection.award];
				}
				return {'event':eventData.eventCollection.event,'activities':activityData.activityCollection,'awards':awardData.awardCollection.award};
}

// add data to wso2_hm_event_model table
function addEvent(data){
	var optionalHeaders = {
		"Accept":"application/json" };

		var result = post(events_url, data.event, optionalHeaders, "json");

		event_id = result.data.GeneratedKeys.Entry.ID
		log.info("Received event model id :"+event_id+" upon addition");
		//get the activities passed by the data and add each activity to wso2_hm_activity_model one after the other
		var activities = data.activities;
		for(var i=0;i<activities.length;i++){
			var activity = {
				"eventID":event_id,"name":activities[i].name,"description":activities[i].desc,"type":activities[i].type};
				var result = post(activities_url, activity, optionalHeaders, "json");
				log.info("added activity model "+activity);
		}

		//get the awards passed by the data and add each award to wso2_hm_event_award_model one after the other
		var awards = data.awards;
		for(var i=0;i<awards.length;i++){
			var award = {
				"event_id":event_id,"name":awards[i].name,"description":awards[i].description,"type":awards[i].type,"isVote":awards[i].isVote};
				var result = post(awards_url, award, optionalHeaders, "json");
				log.info("added award model"+award);
		}

		//return the generated key when the event is added to the database
		return event_id;
}

//return the event id in the database given the event name
function getEventIDFromName(data){
	var optionalHeaders = {
		"Accept":"application/json" };
		var result = get(newURl+'event_id_from_name/'+encodeURI(data.eventInstance.eventName),null,{
			"Accept":"application/json"},"application/json");
			log.info(result);
			var eventIdObj = parse(result.data);
			var eventID = eventIdObj.event_id.event_id.id;
			log.info("Rceived event id :"+eventID+" for name: "+data.eventInstance.eventName);
			return eventID;

}

// add data to wso2_hm_event table
function addEventInstance(data){

	log.info("received data:"+data);
	var eventID = this.getEventIDFromName(data);
	var eventInstName = data.eventInstance.name;
	var optionalHeaders ={
		"Accept":"application/json"};
		var eventID = this.getEventIDFromName(data);
		var eventInstName = data.eventInstance.name;
		var eventInstDescription = data.eventInstance.description;
		var eventInstStartDate = data.eventInstance.startDate;
		var eventInstEndDate = data.eventInstance.endDate;


		var eventInst={
			"name": eventInstName,"event_id":eventID, "description":eventInstDescription, "startDate":eventInstStartDate, "endDate":eventInstEndDate};

			var result = post(newURl+"add_event_instance", eventInst, optionalHeaders, "json");
			log.info("Added event instance:"+eventInst);
			event_instance_id = result.data.GeneratedKeys.Entry.ID;

			var activityInstances = data.activityInstance;
			log.info("received activities:"+activityInstances);
			var awardInstances = data.awardInstance;

			log.info("received awards:"+awardInstances);

			for(var i=0;i<(activityInstances.length)/2;i++){
				log.info(i);

				var activityInstance = {
					"event_instance_id":event_instance_id,"activity_id":activityInstances[i].activityID,"datetime":activityInstances[i].activityInstDate,"venue":activityInstances[i].activityInstVenue,"description":activityInstances[i].activityInstDesc};
					log.info("adding activity instance :"+activityInstance);
					post(newURl+"add_activity_instance", activityInstance, optionalHeaders, "json");
					log.info("added activity instance :"+activityInstance);
			}

			for (var i=0;i<(awardInstances.length)/2;i++){

				var awardInstance = {
					"event_instance_id":event_instance_id,"event_award_id":awardInstances[i].awardID,"vote_startDate":awardInstances[i].awardInstStart,"vote_endDate":awardInstances[i].awardInstEnd};
					log.info("adding event award instance: "+awardInstance);
					var result = post(newURl+"add_award_instance", awardInstance, optionalHeaders, "json");
					log.info("added event award instance: "+awardInstance);
			}
			log.info("exiting addEventInstace of dataService");
			return event_instance_id;
}

function getEventsWithKey(key){

	log.info("$$$$$$$$$$$$$$$$$$$ HERE $$$$$$$$$$$$$$$$$$$");
	var result = get(newURl+'events_like/'+encodeURI(key.eventName),null,{
		"Accept":"application/json"},"application/json");
		log.info("received events:"+parse(result.data));
		return parse(result.data);
}


//get the activities and awards lists for a given event
function getActivitiesAndAwardsForEvent(data){

	var dataDup = {
		"eventInstance":data
	};
	var eventID = this.getEventIDFromName(dataDup);
	var activities = this.getActivitiesForEventID(eventID);
	var awards = this.getAwardsForEventID(eventID);
	var eventActivitiesAndAwards = {
		"activities":activities.activityCollection.activity,"awards":awards.event_awardCollection.event_award};

		return eventActivitiesAndAwards;
}

//get activity for a given event_id
function getActivitiesForEventID(id){
	var data = get(newURl+'activities_from_event_id/'+id,null,{
		"Accept":"application/json"},"application/json");
		log.info("received activities:"+data.data);

		log.info(data);
		return parse(data.data);
}

//get votes for a given event award based on the event award id
function getAwardsForEventID(id){
	var data = get(newURl+'awards_from_event_id/'+id,null,{
		"Accept":"application/json"},"application/json");
		log.info("received awards:"+data.data);
		return parse(data.data);

}

// getting the vote based on event award id
function getAwardVotes(id){
	var data = get(votes_url+ id,null,{
		"Accept":"application/json"},"application/json");
		var voteData= parse(data.data);
		return voteData;

}

//
function updateEvent(data){
	var headers = {
		"Accept": "application/json"};

		var event_id = data.event.id;
		var result = post(url+'edit-event',data.event,headers,'json', function(data,xhr){
			log.info("successfully updated the event");
		});


			var activities = data.activities;
			for(var i=0;i<activities.length;i++){
				var activity = {
					"eventID":event_id,"name":activities[i].name,"description":activities[i].desc,"type":activities[i].type};
					var result = post(activities_url, activity, headers, "json");

			}

			var awards = data.awards;
			for(var i=0;i<awards.length;i++){
				var award = {
					"event_id":event_id,"name":awards[i].name,"description":awards[i].description,"type":awards[i].type,"isVote":awards[i].isVote};
					var result = post(awards_url, award, headers, "json");
			}

			var deletedActivities = data.deletedActivities;
			for(var i=0;i<deletedActivities.length;i++){
				deleteActivity(deletedActivities[i]);
			}

			var deletedAwards = data.deletedAwards;
			for(var i=0;i<deletedAwards.length;i++){
				deleteAward(deletedAwards[i]);
			}


			for(var id in data.editedActivities){
				var result = post(url+'activity/edit/',data.editedActivities[id] ,headers,'json', function(data,xhr){
					log.info("successfully updated the activity");
				});

			}

			for(var id in data.editedAwards){
				var result = post(url+'award/edit/',data.editedAwards[id] ,headers,'json', function(data,xhr){
					log.info("successfully updated the award");
				});
			}
}


function getEvents(){
	var data = parse(get(url+'events',null,{
		"Accept":"application/json"},"application/json").data);
		log.info("received events list : " +data.data);

		if ( data.eventCollection==""){
			data.eventCollection = {
				'event':[]};
		}


		if ( !(data.eventCollection.event instanceof Array)){
			data.eventCollection.event = [data.eventCollection.event];
		}

		return data;
		//log.info(data.eventCollection);
}

function getEventNames(){
	var data =parse(get(newURl+'event_names',null,{
		"Accept":"application/json"},"application/json").data);

		if ( data.event_nameCollection==""){
			data.event_nameCollection = {
				'event_name':[]};
		}

		if ( !(data.event_nameCollection.event_name instanceof Array)){
			data.event_nameCollection.event_name = [data.event_nameCollection.event_name];
		}

		log.info(data);
		return data;
}

function deleteEvent(id){
	del(url+'events/'+id);
}

function deleteEventInstance(id){
	del(url+'event-instance/'+id);
}


function getAwardDetails(event_award_id,event_instance_id){
	var event_awardData=parse(get(awards_url+event_award_id,null,{
		"Accept":"application/json"},"Application/json").data);
		var event_instanceData = parse(get(event_instance_url+'event_instance_id'+id,null,{
			"Accept":"application/json"},"application/json").data);

			if(!(event_instanceData.event_instanceCollection.activity instanceof Array)){
				event_instanceData.event_instanceCollection.activity = [event_instanceData.event_instanceCollection.activity];
			}

			if(!(event_awardData.event_awardCollection.award instanceof Array)){
				event_awardData.event_awardCollection.award = [event_awardData.event_awardCollection.award];
			}
			return {'event_instance':event_instanceData.event_instanceCollection.event_instance,'event_award':event_awardData.event_awardCollection};
}

function getEventInstanceFromEvent(eventID){
	var data = get(url+'event/instants/'+eventID,null,{
		"Accept":"application/json"},"application/json");
		log.info(data);
		return parse(data.data);
}

function getNominees(){
	var data = get(url+'votes',null,{
		"Accept":"application/json"},"application/json");
		return parse(data.data);
}

function getHouseMembers(house_id){
	var data = get(url+'people/house/'+house_id,null,{
		"Accept":"application/json"},"application/json");
		return parse(data.data);
}

function getHouseCount(){
	var data = get(url+'people/house/count',null,{
		"Accept":"application/json"},"application/json");
		return parse(data.data);
}

function getHouseByName(name){
	var re = /\\*@wso2.com$/

	if (!re.test(name)) {
		name = name+"@wso2.com";
	}

	var data = get(url+'people/name/'+name,null,{
		"Accept":"application/json"},"application/json");
		return parse(data.data);
}

function addPerson(name,house_id){
	try{
		var optionalHeaders = {
			"Accept":"application/json" };
			var person = {
				"name":name,"house_id":house_id};
				var response = post(url+"people", person, optionalHeaders, "json");
				return true;
	}
	catch(e){
		log.error(e);
		return false;
	}
}

function activatePerson(name){
	try{
		get(url+'people/activate/'+name,null,{
			"Accept":"application/json"},"application/json");
			return true;
	}
	catch(e){
		log.error(e);
		return false;
	}
}

function deactivatePerson(name){
	try{
		get(url+'people/deactivate/'+name,null,{
			"Accept":"application/json"},"application/json");
			return true;
	}
	catch(e){
		log.error(e);
		return false;
	}
}

// getting the ID of the nominees from the table wso2_hm_votes
function getNominees(id){
	var data = get(votesNominee_url+ id,null,{
		"Accept":"application/json"},"application/json");
		var voteData= parse(data.data);
		return voteData;

}
// getting the name of a person based on the Id from the table wso2_hm_people

function getNames(id){
	var data = get(peopleNames_url+ id,null,{
		"Accept":"application/json"},"application/json");
		var peopleData= parse(data.data);
		var names= peopleData.peopleCollection.people;


		return names;
			
}
//getting the data of currentevents startDate<SYSDATE()<endDate from events instance table and relevant activities
function getCurrentEvents(){
	var data = parse(get(url+'current-events',null,{
		"Accept":"application/json"},"application/json").data);

		if(data.Entries == ""){
			data.Entries = {
				'Entry':[]};
				log.info("received data is null");
		}

		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}

		var events = data.Entries.Entry;

		log.info("receiving activities for the current event");
		for(var i=0;i<events.length;i++){
			var activities = parse(get(url+'event-instance/next-activity/'+events[i].id,null,{
				"Accept":"application/json"},"application/json").data);

				if(activities.Entries==null){
					activities.Entries = {
						'Entry':null};
				}
				if(!(activities.Entries.Entry instanceof Array)){
					activities.Entries.Entry = [activities.Entries.Entry];
				}
				events[i].activities = activities.Entries.Entry;
		}

		return events;
}
//getting the data of currentevents startDate>SYSDATE() from events instance table and relevant activities
function getFutureEvents(){
	var data = parse(get(url+'future-events',null,{
		"Accept":"application/json"},"application/json").data);

		if(data.Entries == ""){
			data.Entries = {
				'Entry':[]};
				log.info("received data is null");
		}

		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}

		var events = data.Entries.Entry;

		log.info("receiving activities for the future event");
		for(var i=0;i<events.length;i++){
			var activities = parse(get(url+'event-instance/next-activity/'+events[i].id,null,{
				"Accept":"application/json"},"application/json").data);

				if(activities.Entries==null){
					activities.Entries = {
						'Entry':null};
				}
				if(!(activities.Entries.Entry instanceof Array)){
					activities.Entries.Entry = [activities.Entries.Entry];
				}
				events[i].activities = activities.Entries.Entry;
		}

		return events;
}

//getting the data of currentevents SYSDATE()<endDate from events instance table and relevant activities
function getCurrentFutureEvents(){
	var data = parse(get(url+'current-future-events',null,{
		"Accept":"application/json"},"application/json").data);

		if(data.Entries==""){
			data.Entries = {
				'Entry':[]}
		}

		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}

		var events = data.Entries.Entry;
		log.info("receiving activities for the current-future event");
		for(var i=0;i<events.length;i++){
			var activities = parse(get(url+'event-instance/next-activity/'+events[i].id,null,{
				"Accept":"application/json"},"application/json").data);

				if(activities.Entries==null){
					activities.Entries = {
						'Entry':null};
				}
				if(!(activities.Entries.Entry instanceof Array)){
					activities.Entries.Entry = [activities.Entries.Entry];
				}
				events[i].activities = activities.Entries.Entry;
		}

		return events;
}

function getEventActivities(id){
	var data = parse(get(url+'event-activities-details',null,{
		"Accept":"application/json"},"application/json").data);

		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}
		return data.Entries;

}

//getting the data of currentevents SYSDATE()>endDate from events instance table and relevant activities
//referred from history.jag
function getPastEvents(){
	var data = parse(get(url+'past-events',null,{
		"Accept":"application/json"},"application/json").data);
		log.info("receiving events for the history")
		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}
		return data.Entries;

}


//getting the awards details award instance name, description, event instance name, description
//referred from awards-list.jag
function getAwards(){
	var data = parse(get(url+'current-elections',null,{
		"Accept":"application/json"},"application/json").data);
		log.info(data.Entries);
		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}
		return data;
}


//returns a list of activity instances for a given event instance id
function getActivityInstanceForEvent(eventID){
	var data = parse(get(url+'event-instance/activities/'+eventID,null,{
		"Accept":"application/json"},"application/json").data);

		if(data.activityCollection == ""){
			data.activityCollection = {
				activity:[]};
		}

		if(!(data.activityCollection.activity instanceof Array)){
			data.activityCollection.activity = [data.activityCollection.activity];
		}

		for(i=0;i<data.activityCollection.activity.length;i++){

			if(data.activityCollection.activity[i].type == "G"){
				var winners = parse(get(url+'activity/winner-house/'+data.activityCollection.activity[i].id,null,{
					"Accept":"application/json"},"application/json").data);

					if(!(winners.Entries.Entry instanceof Array)){
						winners.Entries.Entry = [winners.Entries.Entry];
					}

					data.activityCollection.activity[i].winner = winners.Entries.Entry;
			}
			else{
				var winners = parse(get(url+'activity/winner-individual/'+data.activityCollection.activity[i].id,null,{
					"Accept":"application/json"},"application/json").data);

					if(!(winners.Entries.Entry instanceof Array)){
						winners.Entries.Entry = [winners.Entries.Entry];
					}
					data.activityCollection.activity[i].winner = winners.Entries.Entry;
			}

		}
		return data.activityCollection.activity;
}

//returns a list of award instances for a given event instance id
function getAwardInstanceForEvent(eventID){
	var data = parse(get(url+'event-instance/awards/'+eventID,null,{
		"Accept":"application/json"},"application/json").data);

		if(data.Entries == ""){
			data.Entries = {
				Entry:[]};
		}

		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}



		for(i=0;i<data.Entries.Entry.length;i++){

			if(data.Entries.Entry[i].type == "G"){
				var winners = getAwardWinnerHouses(data.Entries.Entry[i].id);
				data.Entries.Entry[i].winner = winners.Entries.Entry;
			}
			else{
				var winners = getAwardWinners(data.Entries.Entry[i].id);
				data.Entries.Entry[i].winner = winners.Entries.Entry;
			}

		}
		// 		log.info(data);
		return data.Entries.Entry;
}

//return all neccasary details about an event instance
function getEventInstance(eventID){

	var eventInstance = parse(get(url+'event-instance/'+eventID,null,{
		"Accept":"application/json"},"application/json").data).event_instanceCollection.event_instance;

		var ranks = parse(get(url+'event/rank/'+eventID,null,{
			"Accept":"application/json"},"application/json").data);

			if(ranks.Entries == ""){
				ranks.Entries = {
					Entry:[]};
			}


			if(!(ranks.Entries.Entry instanceof Array)){
				ranks.Entries.Entry = [ranks.Entries.Entry];
			}


			var awards = getAwardInstanceForEvent(eventID);
			var activities = getActivityInstanceForEvent(eventID);

			return {"eventInstance":eventInstance, "awards":awards,"activities":activities, 'ranks':ranks.Entries.Entry};
}


//returns a list of award winners
function getAwardWinners(awardID){
	var data = parse(get(url+'award/winner/'+awardID,null,{
		"Accept":"application/json"},"application/json").data);
		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}
		return data;
}

//returns a list of award winners
function getAwardWinnerHouses(awardID){
	var data = parse(get(url+'award/winner-house/'+awardID,null,{
		"Accept":"application/json"},"application/json").data);
		if(!(data.Entries.Entry instanceof Array)){
			data.Entries.Entry = [data.Entries.Entry];
		}
		log.info(data);
		return data;
}


//getting all the names of the people based on the Id from the table wso2_hm_people
function getId(){
	var data = get(url+ 'people',null,{
		"Accept":"application/json"},"application/json");
		var peopleData= parse(data.data);
		var people= peopleData.peopleCollection;

		return people;
			
}
//inserting votes to the table wso2_hm_votesa
function addNominee(vote){
	try{
		var optionalHeaders = {
			"Accept":"application/json" };

			post(votes_url, vote, optionalHeaders, "json");

			return true;
	}
	catch(e){
		log.error(e);
		return false;
	}



}
// getting all the votes from the data service from the table wso2_hm_votes
function getVotes(){
	var data = get(url+'votes',null,{
		"Accept":"application/json"},"application/json");

		return parse(data.data);
}

//deleting an activity. First check if there is any instances of that activity.
//if there are mark the event as null so that event instances can use the data if there is a need
//else delete completely
function deleteActivity(activity_id){
	var activity_instances = get(url+ 'activity/instances/'+activity_id,null,{
		"Accept":"application/json"},"application/json");
		log.info(activity_instances.Entries);
		if(activity_instances.Entries==null){
			del(url+'activity/'+activity_id);
		}
		else{
			get(url+ 'activity/remove-event/'+activity_id,null,{
				"Accept":"application/json"},"application/json");
		}
}

//deleting a award. First check if there is any instances of that award.
//if there are mark the event as null so that event instances can use the data if there is a need
//else delete completely
function deleteAward(award_id){
	var award_instances = get(url+ 'award/instances/'+award_id,null,{
		"Accept":"application/json"},"application/json");
		if(award_instances.Entries==null){
			del(url+'award/'+award_id);
		}
		else{
			get(url+ 'award/remove-event/'+award_id,null,{
				"Accept":"application/json"},"application/json");
		}
}


function searchPeople(name){
	var people = parse(get(url+ 'people/search/'+name,null,{
		"Accept":"application/json"},"application/json").data);

		if(people.Entries==null){
			Entries={
				Entry:[]}
		}
		return people.Entries.Entry;
}

function setEventRanking(data){
	log.info(data);
	del(url+'event-winner/'+data.eventId);
	var rankings = data.rankings;
	var optionalHeaders = {
		"Accept":"application/json" };
		try{
			for(var i=0;i<rankings.length;i++){
				post(url+'event-winner/',
				{
					'event_instance_id':data.eventId,'rank':rankings[i].rank,'house_id':rankings[i].house_id},optionalHeaders,'json', function(data,xhr){
						log.info("successfully updated the award");
					});
			}
		}
		catch(e){
			log.info("Error");
		}

}

function updateEventInfo(data){

	try{
		var headers = {
			"Accept": "application/json"};
			var result = post(url+'event-instance/update',data,headers,'json', function(data,xhr){
				log.info("successfully updated the event");
			});
			return true;
	}
	catch(e){
		return false;
	}
}

function deleteActivityInstance(data){
	try{
		del(url+'activity-instance/'+data.id);
		return true;
	}
	catch(e){
		return false;
	}

}

function deleteAwardInstance(data){
	try{
		del(url+'award-instance/'+data.id);
		return true;
	}
	catch(e){
		return false;
	}

}

function updateActivityInstance(data){

	try{
		var headers = {
			"Accept": "application/json"};
			var result = post(url+'activity-instance/update',data,headers,'json', function(data,xhr){
				log.info("successfully updated the event");
			});
			return true;
	}
	catch(e){
		return false;
	}
}

function updateAwardInstance(data){

	try{
		var headers = {
			"Accept": "application/json"};
			var result = post(url+'award-instance/update',data,headers,'json', function(data,xhr){
				log.info("successfully updated the event");
			});
			return true;
	}
	catch(e){
		return false;
	}
}

function getIDFromName(name){

	var re = /\\*@wso2.com$/

	if (!re.test(name)) {
		name = name+"@wso2.com";
	}

	var people = parse(get(url+ 'people/id',{
		'name':name},{
		"Accept":"application/json"},"application/json").data);

		return people;
}


function addAwardWinnerIndividual(data){
	var name = getIDFromName(data.name);

	if(name.Entries==""){
		return {'success':false, 'error' : "name not found"};
	}
	else{
		try{
			var headers = {
				"Accept": "application/json"};
				var result = post(url+'award-instance/winner',{
					"people_id":name.Entries.Entry.id, "event_award_instance_id":data.id},headers,'json', function(data,xhr){
					});
					return {'success':true};
		}
		catch(e){
			return {'success':false, 'error' : "Internal Error"};
		}
	}
}

function addAwardWinnerHouse(data){
	try{
		var headers = {
			"Accept": "application/json"};
			var result = post(url+'award-instance/winner-house',data,headers,'json', function(data,xhr){
			});
			return {'success':true};
	}
	catch(e){
		return {'success':false, 'error' : "Internal Error"};
	}

}

function deleteAwardWinnerIndividual(data){
	var headers = {
		"Accept": "application/json"};
		for(var i =0;i<data.length;i++){
			var id = getIDFromName(data[i].name);

			log.info(id.Entries.Entry.id);
			var result = post(url+'delete-award-winner',{
				'people_id':id.Entries.Entry.id ,'event_award_instance_id':data[i].event_award_instance_id},headers,'json', function(data,xhr){
				});

		}
		if(data!=null){
			log.info("deleted award winner individual datails ");
		}else{
			log.info(" not deleted award winner individual datails");
		}
}
function deleteAwardWinnerGroup(data){
	var headers = {
		"Accept": "application/json"};
		for(var i =0;i<data.length;i++){
			var result = post(url+'delete-award-winner-house',{
				'house_id':data[i].name,'event_award_instance_id':data[i].event_award_instance_id},headers,'json', function(data,xhr){
				});

		}
		if(data!=null){
			log.info("deleted award winner group datails ");
		}else{
			log.info(" not deleted award winner group datails");
		}
}

//This function is used to add an activity ranking if the activity is a group activity
function addActivityWinnerHouse(data){
	if(data!=null){
		log.info("adding activity winner house datails ");
	}else{
		log.info(" not adding activity winner housee datails");
	}
	try{
		var headers = {
			"Accept": "application/json"};
			var result = post(url+'add-activity-winner-house',{
				'rank':data.rank , 'description':data.description, 'activity_instance_id':data.id, 'house_id':data.winner},headers,'json');


				if(result.data["REQUEST_STATUS"] == "SUCCESSFUL"){
					return {'success':true};
				}
				else{
					return {'success':false, 'error' : "Couldnt add the ranking.Please check whether this house is already added"};
				}

	}
	catch(e){
		return {'success':false, 'error' : "Internal Error"};
	}

}

//This function is used to add an activity ranking if the activity is a individual activity
function addActivityWinner(data){

	log.info(data);
	try{
		var id = getIDFromName(data.winner);

		log.info(id);

		if(id.Entries==""){

			return {'success':false, 'error' : "name not found in the database"};
		}


		var headers = {
			"Accept": "application/json"};
			var result = post(url+'add-activity-winner',{
				'rank':data.rank , 'description':data.description, 'activity_instance_id':data.id, 'people_id':id.Entries.Entry.id},headers,'json');
				if(result.data["REQUEST_STATUS"] == "SUCCESSFUL"){
					return {'success':true};
				}
				else{
					return {'success':false, 'error' : "Couldnt add the ranking.Please check whether this person is already added to rankings"};
				}
	}
	catch(e){
		return {'success':false, 'error' : "Internal Error"};
	}

}

function deleteActivityWinnerIndividual(data){
	log.info(data);
	var headers = {
		"Accept": "application/json"};
		for(var i =0;i<data.length;i++){
			var id = getIDFromName(data[i].name);

			var result = post(url+'delete-activity-winner',{
				'people_id':id.Entries.Entry.id ,'activity_instance_id':data[i].activity_instance_id},headers,'json', function(data,xhr){
				});

		}
		if(data!=null){
			log.info("deleted activity winner individual datails ");
		}else{
			log.info(" not deleted activity winner individual datails");
		}

}

function deleteActivityWinnerGroup(data){
	log.info(data);
	var headers = {
		"Accept": "application/json"};
		for(var i =0;i<data.length;i++){
			var result = post(url+'delete-activity-winner-house',{
				'house_id':data[i].name,'activity_instance_id':data[i].activity_instance_id},headers,'json', function(data,xhr){
				});

		}
		if(data!=null){
			log.info("deleted activity winner group datails ");
		}else{
			log.info(" not deleted activity winner group datails");
		}
}

// getting event award Id from the event award instance id from the table wso2_hm_event_award
function getEventAwardId(id){

	var data = get(award_instance_url+ id,null,{
		"Accept":"application/json"},"application/json");
		var voteData= parse(data.data);
		if(data!=null){
			log.info("received event award id");
		}else{
			log.info(" not received event award id");
		}
		return voteData;




}
// getting the type of the award from the awar id from the table wso2_hm_event_award_model
function getEventAwardType(id){

	var data = get(award_type_url+ id,null,{
		"Accept":"application/json"},"application/json");

		var voteData= parse(data.data);
		if(data!=null){
			log.info("received event award type :"+data);
		}
		return voteData;

}
// getting house name from the id from the table wso2_hm_house
function getHouse(id){

	var data = get(house_url+ id,null,{
		"Accept":"application/json"},"application/json");

		var houseData= parse(data.data);
		var houses= houseData.houseCollection.house;
		if(data!=null){
			log.info("received house data :"+data+"for given id :"+id);
		}
		return houses;

}
function getHouseList(){

	var data = get(url+ 'houses',null,{
		"Accept":"application/json"},"application/json");

		var houseData= parse(data.data);
		var houses= houseData.houseCollection.house;
		if(data!=null){
			log.info("received houses data ");
		}
		return houses;

}
%>
