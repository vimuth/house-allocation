<%
var caramel;
var log = new Log();
var dataService = require('modules/dataservice.jag');
var eventList = dataService.getEventNames();
var verb = request.getMethod();

Handlebars = require('handlebars');

Handlebars.Handlebars.registerHelper('if_eq', function(a, b,options) {
	if (a == b)
		return options.fn(this);
	else
		return options.inverse(this);
});

	(function () {

		//New authorization using app manager SSO
		var header = request.getHeader("X-JWT-Assertion");

		// Create Base64 Object
		var Base64 = require('../modules/base64.js');

		if(header !=null){
			var jwtAssertions = header.split("."); //JWT header by default contains three '.' separated sections
			var jsonString = Base64.decode(jwtAssertions[1]);
			jsonString = jsonString.replace("http://wso2.org/claims/emailaddress", "email");
			jsonString = jsonString.replace("http://wso2.org/claims/role", "roles");
			var obj = parse(jsonString);
			var email = obj.email;
			var roles = obj.roles;

			if (roles.indexOf("admin") != -1) {
				session.put("username", email);
				session.put("role", "admin");
			} else {
				session.put("username", email);
				session.put("role", "user");
			}
		}

		var username=session.get('username');
		var admin= session.get('role')=='admin';

		if(username!="admin"){
			response.sendRedirect("../login.jag");
			return;
		}


		log.info(verb);

		if( verb=='POST'){
			try {

				var data = request.getContent();

				log.info('Received event instance to add:');
				log.info(data);
				var id = dataService.addEventInstance(data);

				log.info('Received event instance id:'+id);

				response.contentType = 'application/json';

				response.content = {
					'redirect':true, 'url':'../event-instance/'+id} ;

					return;

			} catch (e) {
				log.error(e.toString());
				response.sendRedirect("../error.jag");
			}

		}
		else{
			if (verb=='GET'){

				var uriMatcher = new URIMatcher(request.getRequestURI());
				//log.info(request.getRequestURI);
				if(uriMatcher.match('/HouseManagement/add-event-instance/{name}')) {

					log.info(uriMatcher.elements().name);

					try{
						var eventName = uriMatcher.elements().name;
						log.info(eventList.event_nameCollection);
						var data = {
							"eventName":eventName};
							var actAndAwards = dataService.getActivitiesAndAwardsForEvent(data);
							//log.info(actAndAwards);
							caramel = require('caramel');
							caramel.render({
								'header':{
								'username': username,
								'role': admin,
							},
							'title': {
							text :'Add Event Instance'
							},
							'sidenav' :{
							'admin': admin , 'house':session.get('house')},
							'eventDetails':{
							'evName':eventName,'events':eventList.event_nameCollection,'activities':actAndAwards.activities,'awards':actAndAwards.awards}
							});
					}
					catch(e){
						log.error(e);
					}
				}
			}
		}
	}());
	%>

